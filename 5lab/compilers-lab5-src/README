Semantic analysis (semantic checker)
====================================
______________________________
* Уникальнось названий классов
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
________________________________________________________________________________________________
* На основе AST для каждого класса Class проверить:
  -- существование всех классов предков на пути от Class к классу Object в графе наследования ++
  -- отсутствие циклов в графе наследования ++
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

* Существование класса с методом main ++
* Уникальность названий полей, методов в классе
* Уникальность названий параметров методов

* Существование переменных, которые используются в выражениях -- область видимости
* В объявлении переменной выполнить проверку отсутсвия её объявления в текущей области видимости


* Проверить все выражения на совместимость типов (в частности, найти ошибки: 1 + "Hello", 2.fun())
