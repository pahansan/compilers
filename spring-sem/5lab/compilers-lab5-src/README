Semantic analysis (semantic checker)
====================================
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* Уникальнось названий классов│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* На основе AST для каждого класса Class проверить:                                             │
│  -- существование всех классов предков на пути от Class к классу Object в графе наследования ++│
│  -- отсутствие циклов в графе наследования ++                                                  │
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* Уникальность названий полей, методов в классе│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* В объявлении переменной выполнить проверку отсутсвия её объявления в текущей области видимости│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│+ Проверить наследование от базовых классов│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* Уникальность названий параметров методов│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│* Существование класса с методом main ++│
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

* Существование переменных, которые используются в выражениях -- область видимости


* Проверить все выражения на совместимость типов (в частности, найти ошибки: 1 + "Hello", 2.fun())
